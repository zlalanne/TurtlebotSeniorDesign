/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-electric-navigation-1.6.5/debian/ros-electric-navigation/opt/ros/electric/stacks/navigation/costmap_2d/msg/VoxelGrid.msg */
#ifndef COSTMAP_2D_MESSAGE_VOXELGRID_H
#define COSTMAP_2D_MESSAGE_VOXELGRID_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "std_msgs/Header.h"
#include "geometry_msgs/Point32.h"
#include "geometry_msgs/Vector3.h"

namespace costmap_2d
{
template <class ContainerAllocator>
struct VoxelGrid_ {
  typedef VoxelGrid_<ContainerAllocator> Type;

  VoxelGrid_()
  : header()
  , data()
  , origin()
  , resolutions()
  , size_x(0)
  , size_y(0)
  , size_z(0)
  {
  }

  VoxelGrid_(const ContainerAllocator& _alloc)
  : header(_alloc)
  , data(_alloc)
  , origin(_alloc)
  , resolutions(_alloc)
  , size_x(0)
  , size_y(0)
  , size_z(0)
  {
  }

  typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
   ::std_msgs::Header_<ContainerAllocator>  header;

  typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _data_type;
  std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  data;

  typedef  ::geometry_msgs::Point32_<ContainerAllocator>  _origin_type;
   ::geometry_msgs::Point32_<ContainerAllocator>  origin;

  typedef  ::geometry_msgs::Vector3_<ContainerAllocator>  _resolutions_type;
   ::geometry_msgs::Vector3_<ContainerAllocator>  resolutions;

  typedef uint32_t _size_x_type;
  uint32_t size_x;

  typedef uint32_t _size_y_type;
  uint32_t size_y;

  typedef uint32_t _size_z_type;
  uint32_t size_z;


  ROS_DEPRECATED uint32_t get_data_size() const { return (uint32_t)data.size(); }
  ROS_DEPRECATED void set_data_size(uint32_t size) { data.resize((size_t)size); }
  ROS_DEPRECATED void get_data_vec(std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other > & vec) const { vec = this->data; }
  ROS_DEPRECATED void set_data_vec(const std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other > & vec) { this->data = vec; }
private:
  static const char* __s_getDataType_() { return "costmap_2d/VoxelGrid"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "48a040827e1322073d78ece5a497029c"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "Header header\n\
uint32[] data\n\
geometry_msgs/Point32 origin\n\
geometry_msgs/Vector3 resolutions\n\
uint32 size_x\n\
uint32 size_y\n\
uint32 size_z\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, header);
    ros::serialization::serialize(stream, data);
    ros::serialization::serialize(stream, origin);
    ros::serialization::serialize(stream, resolutions);
    ros::serialization::serialize(stream, size_x);
    ros::serialization::serialize(stream, size_y);
    ros::serialization::serialize(stream, size_z);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, header);
    ros::serialization::deserialize(stream, data);
    ros::serialization::deserialize(stream, origin);
    ros::serialization::deserialize(stream, resolutions);
    ros::serialization::deserialize(stream, size_x);
    ros::serialization::deserialize(stream, size_y);
    ros::serialization::deserialize(stream, size_z);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(header);
    size += ros::serialization::serializationLength(data);
    size += ros::serialization::serializationLength(origin);
    size += ros::serialization::serializationLength(resolutions);
    size += ros::serialization::serializationLength(size_x);
    size += ros::serialization::serializationLength(size_y);
    size += ros::serialization::serializationLength(size_z);
    return size;
  }

  typedef boost::shared_ptr< ::costmap_2d::VoxelGrid_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::costmap_2d::VoxelGrid_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct VoxelGrid
typedef  ::costmap_2d::VoxelGrid_<std::allocator<void> > VoxelGrid;

typedef boost::shared_ptr< ::costmap_2d::VoxelGrid> VoxelGridPtr;
typedef boost::shared_ptr< ::costmap_2d::VoxelGrid const> VoxelGridConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::costmap_2d::VoxelGrid_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::costmap_2d::VoxelGrid_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace costmap_2d

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::costmap_2d::VoxelGrid_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::costmap_2d::VoxelGrid_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::costmap_2d::VoxelGrid_<ContainerAllocator> > {
  static const char* value() 
  {
    return "48a040827e1322073d78ece5a497029c";
  }

  static const char* value(const  ::costmap_2d::VoxelGrid_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x48a040827e132207ULL;
  static const uint64_t static_value2 = 0x3d78ece5a497029cULL;
};

template<class ContainerAllocator>
struct DataType< ::costmap_2d::VoxelGrid_<ContainerAllocator> > {
  static const char* value() 
  {
    return "costmap_2d/VoxelGrid";
  }

  static const char* value(const  ::costmap_2d::VoxelGrid_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::costmap_2d::VoxelGrid_<ContainerAllocator> > {
  static const char* value() 
  {
    return "Header header\n\
uint32[] data\n\
geometry_msgs/Point32 origin\n\
geometry_msgs/Vector3 resolutions\n\
uint32 size_x\n\
uint32 size_y\n\
uint32 size_z\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.secs: seconds (stamp_secs) since epoch\n\
# * stamp.nsecs: nanoseconds since stamp_secs\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
";
  }

  static const char* value(const  ::costmap_2d::VoxelGrid_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct HasHeader< ::costmap_2d::VoxelGrid_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct HasHeader< const ::costmap_2d::VoxelGrid_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::costmap_2d::VoxelGrid_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.header);
    stream.next(m.data);
    stream.next(m.origin);
    stream.next(m.resolutions);
    stream.next(m.size_x);
    stream.next(m.size_y);
    stream.next(m.size_z);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct VoxelGrid_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::costmap_2d::VoxelGrid_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::costmap_2d::VoxelGrid_<ContainerAllocator> & v) 
  {
    s << indent << "header: ";
s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "data[]" << std::endl;
    for (size_t i = 0; i < v.data.size(); ++i)
    {
      s << indent << "  data[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.data[i]);
    }
    s << indent << "origin: ";
s << std::endl;
    Printer< ::geometry_msgs::Point32_<ContainerAllocator> >::stream(s, indent + "  ", v.origin);
    s << indent << "resolutions: ";
s << std::endl;
    Printer< ::geometry_msgs::Vector3_<ContainerAllocator> >::stream(s, indent + "  ", v.resolutions);
    s << indent << "size_x: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.size_x);
    s << indent << "size_y: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.size_y);
    s << indent << "size_z: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.size_z);
  }
};


} // namespace message_operations
} // namespace ros

#endif // COSTMAP_2D_MESSAGE_VOXELGRID_H

