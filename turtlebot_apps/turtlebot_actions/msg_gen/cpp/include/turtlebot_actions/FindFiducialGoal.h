/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-electric-turtlebot-apps-0.2.3/debian/ros-electric-turtlebot-apps/opt/ros/electric/stacks/turtlebot_apps/turtlebot_actions/msg/FindFiducialGoal.msg */
#ifndef TURTLEBOT_ACTIONS_MESSAGE_FINDFIDUCIALGOAL_H
#define TURTLEBOT_ACTIONS_MESSAGE_FINDFIDUCIALGOAL_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace turtlebot_actions
{
template <class ContainerAllocator>
struct FindFiducialGoal_ {
  typedef FindFiducialGoal_<ContainerAllocator> Type;

  FindFiducialGoal_()
  : camera_name()
  , pattern_width(0)
  , pattern_height(0)
  , pattern_size(0.0)
  , pattern_type(0)
  {
  }

  FindFiducialGoal_(const ContainerAllocator& _alloc)
  : camera_name(_alloc)
  , pattern_width(0)
  , pattern_height(0)
  , pattern_size(0.0)
  , pattern_type(0)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _camera_name_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  camera_name;

  typedef uint8_t _pattern_width_type;
  uint8_t pattern_width;

  typedef uint8_t _pattern_height_type;
  uint8_t pattern_height;

  typedef float _pattern_size_type;
  float pattern_size;

  typedef uint8_t _pattern_type_type;
  uint8_t pattern_type;

  enum { CHESSBOARD = 1 };
  enum { CIRCLES_GRID = 2 };
  enum { ASYMMETRIC_CIRCLES_GRID = 3 };

private:
  static const char* __s_getDataType_() { return "turtlebot_actions/FindFiducialGoal"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "8906385fe785bb5733551eb61968fe5b"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
uint8   CHESSBOARD = 1\n\
uint8   CIRCLES_GRID = 2\n\
uint8   ASYMMETRIC_CIRCLES_GRID =3\n\
\n\
string    camera_name       # name of the camera \n\
uint8     pattern_width     # number of objects across\n\
uint8     pattern_height    # number of objects down\n\
float32   pattern_size      # size the object pattern (square size or circle size)\n\
uint8     pattern_type      # type of pattern (CHESSBOARD, CIRCLES_GRID, ASYMMETRIC_CIRCLES_GRID)\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, camera_name);
    ros::serialization::serialize(stream, pattern_width);
    ros::serialization::serialize(stream, pattern_height);
    ros::serialization::serialize(stream, pattern_size);
    ros::serialization::serialize(stream, pattern_type);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, camera_name);
    ros::serialization::deserialize(stream, pattern_width);
    ros::serialization::deserialize(stream, pattern_height);
    ros::serialization::deserialize(stream, pattern_size);
    ros::serialization::deserialize(stream, pattern_type);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(camera_name);
    size += ros::serialization::serializationLength(pattern_width);
    size += ros::serialization::serializationLength(pattern_height);
    size += ros::serialization::serializationLength(pattern_size);
    size += ros::serialization::serializationLength(pattern_type);
    return size;
  }

  typedef boost::shared_ptr< ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct FindFiducialGoal
typedef  ::turtlebot_actions::FindFiducialGoal_<std::allocator<void> > FindFiducialGoal;

typedef boost::shared_ptr< ::turtlebot_actions::FindFiducialGoal> FindFiducialGoalPtr;
typedef boost::shared_ptr< ::turtlebot_actions::FindFiducialGoal const> FindFiducialGoalConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace turtlebot_actions

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "8906385fe785bb5733551eb61968fe5b";
  }

  static const char* value(const  ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x8906385fe785bb57ULL;
  static const uint64_t static_value2 = 0x33551eb61968fe5bULL;
};

template<class ContainerAllocator>
struct DataType< ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "turtlebot_actions/FindFiducialGoal";
  }

  static const char* value(const  ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======\n\
#goal definition\n\
uint8   CHESSBOARD = 1\n\
uint8   CIRCLES_GRID = 2\n\
uint8   ASYMMETRIC_CIRCLES_GRID =3\n\
\n\
string    camera_name       # name of the camera \n\
uint8     pattern_width     # number of objects across\n\
uint8     pattern_height    # number of objects down\n\
float32   pattern_size      # size the object pattern (square size or circle size)\n\
uint8     pattern_type      # type of pattern (CHESSBOARD, CIRCLES_GRID, ASYMMETRIC_CIRCLES_GRID)\n\
\n\
";
  }

  static const char* value(const  ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.camera_name);
    stream.next(m.pattern_width);
    stream.next(m.pattern_height);
    stream.next(m.pattern_size);
    stream.next(m.pattern_type);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct FindFiducialGoal_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::turtlebot_actions::FindFiducialGoal_<ContainerAllocator> & v) 
  {
    s << indent << "camera_name: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.camera_name);
    s << indent << "pattern_width: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pattern_width);
    s << indent << "pattern_height: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pattern_height);
    s << indent << "pattern_size: ";
    Printer<float>::stream(s, indent + "  ", v.pattern_size);
    s << indent << "pattern_type: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.pattern_type);
  }
};


} // namespace message_operations
} // namespace ros

#endif // TURTLEBOT_ACTIONS_MESSAGE_FINDFIDUCIALGOAL_H

