"""autogenerated by genmsg_py from ActionMsgMapperGoal.msg. Do not edit."""
import roslib.message
import struct


class ActionMsgMapperGoal(roslib.message.Message):
  _md5sum = "9c97ba579bcd822e978741dfc338d44b"
  _type = "turtlebot_actions/ActionMsgMapperGoal"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """# ====== DO NOT MODIFY! AUTOGENERATED FROM AN ACTION DEFINITION ======
#goal definition
string    input_topic      
string    output_topic      
string    input_type      
string    output_type      
string[]   input_list
string[]   output_list



"""
  __slots__ = ['input_topic','output_topic','input_type','output_type','input_list','output_list']
  _slot_types = ['string','string','string','string','string[]','string[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.
    
    The available fields are:
       input_topic,output_topic,input_type,output_type,input_list,output_list
    
    @param args: complete set of field values, in .msg order
    @param kwds: use keyword arguments corresponding to message field names
    to set specific fields. 
    """
    if args or kwds:
      super(ActionMsgMapperGoal, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.input_topic is None:
        self.input_topic = ''
      if self.output_topic is None:
        self.output_topic = ''
      if self.input_type is None:
        self.input_type = ''
      if self.output_type is None:
        self.output_type = ''
      if self.input_list is None:
        self.input_list = []
      if self.output_list is None:
        self.output_list = []
    else:
      self.input_topic = ''
      self.output_topic = ''
      self.input_type = ''
      self.output_type = ''
      self.input_list = []
      self.output_list = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    @param buff: buffer
    @type  buff: StringIO
    """
    try:
      _x = self.input_topic
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.output_topic
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.input_type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.output_type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.input_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.input_list:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.output_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.output_list:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    @param str: byte array of serialized message
    @type  str: str
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.input_topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.output_topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.input_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.output_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.input_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.output_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.output_list.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    @param buff: buffer
    @type  buff: StringIO
    @param numpy: numpy python module
    @type  numpy module
    """
    try:
      _x = self.input_topic
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.output_topic
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.input_type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.output_type
      length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      length = len(self.input_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.input_list:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
      length = len(self.output_list)
      buff.write(_struct_I.pack(length))
      for val1 in self.output_list:
        length = len(val1)
        buff.write(struct.pack('<I%ss'%length, length, val1))
    except struct.error as se: self._check_types(se)
    except TypeError as te: self._check_types(te)

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    @param str: byte array of serialized message
    @type  str: str
    @param numpy: numpy python module
    @type  numpy: module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.input_topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.output_topic = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.input_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      self.output_type = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.input_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.input_list.append(val1)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      self.output_list = []
      for i in range(0, length):
        start = end
        end += 4
        (length,) = _struct_I.unpack(str[start:end])
        start = end
        end += length
        val1 = str[start:end]
        self.output_list.append(val1)
      return self
    except struct.error as e:
      raise roslib.message.DeserializationError(e) #most likely buffer underfill

_struct_I = roslib.message.struct_I
