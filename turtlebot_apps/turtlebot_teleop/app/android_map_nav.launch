<launch>
  <!-- convert to a capability -->
  <include file="$(find turtlebot_bringup)/base.launch" />

  <param name="camera/rgb/image_color/compressed/jpeg_quality" value="22"/>

  <include file="$(find openni_camera)/launch/kinect_frames.launch"/>

  <!-- Make a slower camera feed available. -->
  <node pkg="topic_tools" type="throttle" name="camera_throttle" output="screen"
        args="messages camera/rgb/image_color/compressed 5"/>

  <node pkg="tf" type="change_notifier" name="tf_throttle_for_android_gui" output="screen">
    <param name="polling_frequency" value="5"/>
    <param name="translational_update_distance" value="-1"/>
    <param name="angular_update_distance" value="-1"/>
    <rosparam param="frame_pairs">
      - {source_frame: base_footprint, target_frame: map}
      - {source_frame: kinect_depth_frame, target_frame: map}
    </rosparam>
  </node>

<!-- Additions for mapping -->
  <!-- Kinect -->
  <node pkg="nodelet" type="nodelet" name="openni_manager" output="screen" respawn="true" args="manager"/>

  <node pkg="nodelet" type="nodelet" name="openni_camera" args="load openni_camera/OpenNINodelet openni_manager" respawn="true">
    <param name="rgb_frame_id" value="kinect_rgb_optical_frame" />
    <param name="depth_frame_id" value="kinect_depth_optical_frame" />
    <param name="depth_registration" value="true" />
    <param name="image_mode" value="2" />
    <param name="depth_mode" value="2" />
    <param name="debayering" value="2" />
    <param name="depth_time_offset" value="0" />
    <param name="image_time_offset" value="0" />

    <rosparam command="load" file="$(find openni_camera)/info/openni_params.yaml" />
  </node>

  <!-- throttling -->
  <node pkg="nodelet" type="nodelet" name="pointcloud_throttle" args="load pointcloud_to_laserscan/CloudThrottle openni_manager" respawn="true">
    <param name="max_rate" value="20.0"/>
    <remap from="cloud_in" to="/camera/depth/points"/>
    <remap from="cloud_out" to="cloud_throttled"/>
  </node>

  <!-- Fake Laser -->
  <node pkg="nodelet" type="nodelet" name="kinect_laser" args="load pointcloud_to_laserscan/CloudToScan openni_manager" respawn="true">
    <param name="output_frame_id" value="/kinect_depth_frame"/>
    <!-- heights are in the (optical?) frame of the kinect -->
    <param name="min_height" value="-0.15"/>
    <param name="max_height" value="0.15"/>
    <remap from="cloud" to="/cloud_throttled"/>
  </node>

  <!-- Fake Laser (narrow one, for localization -->
  <node pkg="nodelet" type="nodelet" name="kinect_laser_narrow" args="load pointcloud_to_laserscan/CloudToScan openni_manager" respawn="true">
    <param name="output_frame_id" value="/kinect_depth_frame"/>
    <!-- heights are in the (optical?) frame of the kinect -->
    <param name="min_height" value="-0.025"/>
    <param name="max_height" value="0.025"/>
    <remap from="cloud" to="/cloud_throttled"/>
    <remap from="scan" to="/narrow_scan"/>
  </node>

  <!--- Run Move Base and Robot Pose EKF -->
  <include file="$(find turtlebot_navigation)/config/move_base_turtlebot.launch" />

  <!-- Load the maps from a warehouse. -->
  <node name="mongo" type="wrapper.py" pkg="mongodb" output="log">
    <param name="database_path" value="warehouse_data"/>
    <param name="overwrite" value="false"/>
  </node>
  <node pkg="map_store" type="map_loader" name="map_loader" output="screen"/>

  <!--- Run AMCL -->
  <include file="$(find turtlebot_navigation)/config/amcl_turtlebot_map_from_topic.launch" />
</launch>
