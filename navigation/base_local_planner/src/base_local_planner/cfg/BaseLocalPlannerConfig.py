## *********************************************************
## 
## File autogenerated for the base_local_planner package 
## by the dynamic_reconfigure package.
## Please do not edit.
## 
## ********************************************************/

##**********************************************************
## Software License Agreement (BSD License)
##
##  Copyright (c) 2008, Willow Garage, Inc.
##  All rights reserved.
##
##  Redistribution and use in source and binary forms, with or without
##  modification, are permitted provided that the following conditions
##  are met:
##
##   * Redistributions of source code must retain the above copyright
##     notice, this list of conditions and the following disclaimer.
##   * Redistributions in binary form must reproduce the above
##     copyright notice, this list of conditions and the following
##     disclaimer in the documentation and/or other materials provided
##     with the distribution.
##   * Neither the name of the Willow Garage nor the names of its
##     contributors may be used to endorse or promote products derived
##     from this software without specific prior written permission.
##
##  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
##  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
##  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS
##  FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE
##  COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,
##  INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,
##  BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
##  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
##  CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT
##  LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN
##  ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
##  POSSIBILITY OF SUCH DAMAGE.
##**********************************************************/

config_description = [{'srcline': 16, 'description': 'The acceleration limit of the robot in the x direction', 'max': 20.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'acc_lim_x', 'edit_method': '', 'default': 1.0, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 17, 'description': 'The acceleration limit of the robot in the y direction', 'max': 20.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'acc_lim_y', 'edit_method': '', 'default': 1.0, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 18, 'description': 'The acceleration limit of the robot in the theta direction', 'max': 20.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'acc_lim_theta', 'edit_method': '', 'default': 1.0, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 20, 'description': 'The maximum x velocity for the robot in m/s', 'max': 20.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'max_vel_x', 'edit_method': '', 'default': 0.55, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 21, 'description': 'The minimum x velocity for the robot in m/s', 'max': 20.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'min_vel_x', 'edit_method': '', 'default': 0.0, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 23, 'description': 'The absolute value of the maximum rotational velocity for the robot in rad/s', 'max': 20.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'max_vel_theta', 'edit_method': '', 'default': 1.0, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 24, 'description': 'The absolute value of the minimum rotational velocity for the robot in rad/s', 'max': 20.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'min_vel_theta', 'edit_method': '', 'default': -1.0, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 25, 'description': 'The absolute value of the minimum in-place rotational velocity the controller will explore', 'max': 20.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'min_in_place_vel_theta', 'edit_method': '', 'default': 0.4, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 27, 'description': 'The amount of time to roll trajectories out for in seconds', 'max': 10.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'sim_time', 'edit_method': '', 'default': 1.7, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 28, 'description': 'The granularity with which to check for collisions along each trajectory in meters', 'max': 5.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'sim_granularity', 'edit_method': '', 'default': 0.025, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 30, 'description': 'The weight for the path distance part of the cost function', 'max': 5.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'pdist_scale', 'edit_method': '', 'default': 0.6, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 31, 'description': 'The weight for the goal distance part of the cost function', 'max': 5.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'gdist_scale', 'edit_method': '', 'default': 0.8, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 32, 'description': 'The weight for the obstacle distance part of the cost function', 'max': 5.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'occdist_scale', 'edit_method': '', 'default': 0.01, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 34, 'description': 'The distance the robot must travel before oscillation flags are reset, in meters', 'max': 5.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'oscillation_reset_dist', 'edit_method': '', 'default': 0.05, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 35, 'description': 'The distance the robot must travel before oscillation flags are reset, in meters', 'max': 5.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'escape_reset_dist', 'edit_method': '', 'default': 0.1, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 36, 'description': 'The distance the robot must travel before oscillation flags are reset, in meters', 'max': 5.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'escape_reset_theta', 'edit_method': '', 'default': 1.5707963267948966, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 38, 'description': 'The number of samples to use when exploring the x velocity space', 'max': 300, 'cconsttype': 'const int', 'ctype': 'int', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'vx_samples', 'edit_method': '', 'default': 20, 'level': 0, 'min': 1, 'type': 'int'}, {'srcline': 39, 'description': 'The number of samples to use when exploring the theta velocity space', 'max': 300, 'cconsttype': 'const int', 'ctype': 'int', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'vtheta_samples', 'edit_method': '', 'default': 20, 'level': 0, 'min': 1, 'type': 'int'}, {'srcline': 41, 'description': 'How far the robot should look ahead of itself when differentiating between different rotational velocities', 'max': 5.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'heading_lookahead', 'edit_method': '', 'default': 0.325, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 43, 'description': 'Set this to true if the robot being controlled can take y velocities and false otherwise', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'holonomic_robot', 'edit_method': '', 'default': True, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 45, 'description': 'The velocity to use while backing up', 'max': 2.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'escape_vel', 'edit_method': '', 'default': -0.1, 'level': 0, 'min': -2.0, 'type': 'double'}, {'srcline': 47, 'description': 'Set this to true to use the Dynamic Window Approach, false to use acceleration limits', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'dwa', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 49, 'description': 'Set this to true to use the Dynamic Window Approach, false to use acceleration limits', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'heading_scoring', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 50, 'description': 'How far to look ahead in time when we score heading based trajectories', 'max': 1.0, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'heading_scoring_timestep', 'edit_method': '', 'default': 0.1, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 52, 'description': 'Set this to true to allow simple attraction to a goal point instead of intelligent cost propagation', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'simple_attractor', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}, {'srcline': 54, 'description': "The distance between simulation points for angular velocity should be small enough that the robot doesn't hit things", 'max': 1.5707963267948966, 'cconsttype': 'const double', 'ctype': 'double', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'angular_sim_granularity', 'edit_method': '', 'default': 0.025, 'level': 0, 'min': 0.0, 'type': 'double'}, {'srcline': 56, 'description': 'A comma delimited list of the y velocities the controller will explore', 'max': '', 'cconsttype': 'const char * const', 'ctype': 'std::string', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'y_vels', 'edit_method': '', 'default': '-0.3,-0.1,0.1,-0.3', 'level': 0, 'min': '', 'type': 'str'}, {'srcline': 58, 'description': 'Retore to the default configuration', 'max': True, 'cconsttype': 'const bool', 'ctype': 'bool', 'srcfile': '../cfg/BaseLocalPlanner.cfg', 'name': 'restore_defaults', 'edit_method': '', 'default': False, 'level': 0, 'min': False, 'type': 'bool'}]

min = {}
max = {}
defaults = {}
level = {}
type = {}
all_level = 0

for param in config_description:
    min[param['name']] = param['min']
    max[param['name']] = param['max']
    defaults[param['name']] = param['default']
    level[param['name']] = param['level']
    type[param['name']] = param['type']
    all_level = all_level | param['level']

