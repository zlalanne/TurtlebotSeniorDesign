/* Auto-generated by genmsg_cpp for file /tmp/buildd/ros-electric-navigation-1.6.5/debian/ros-electric-navigation/opt/ros/electric/stacks/navigation/navfn/srv/SetCostmap.srv */
#ifndef NAVFN_SERVICE_SETCOSTMAP_H
#define NAVFN_SERVICE_SETCOSTMAP_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"




namespace navfn
{
template <class ContainerAllocator>
struct SetCostmapRequest_ {
  typedef SetCostmapRequest_<ContainerAllocator> Type;

  SetCostmapRequest_()
  : costs()
  , height(0)
  , width(0)
  {
  }

  SetCostmapRequest_(const ContainerAllocator& _alloc)
  : costs(_alloc)
  , height(0)
  , width(0)
  {
  }

  typedef std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  _costs_type;
  std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other >  costs;

  typedef uint16_t _height_type;
  uint16_t height;

  typedef uint16_t _width_type;
  uint16_t width;


  ROS_DEPRECATED uint32_t get_costs_size() const { return (uint32_t)costs.size(); }
  ROS_DEPRECATED void set_costs_size(uint32_t size) { costs.resize((size_t)size); }
  ROS_DEPRECATED void get_costs_vec(std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) const { vec = this->costs; }
  ROS_DEPRECATED void set_costs_vec(const std::vector<uint8_t, typename ContainerAllocator::template rebind<uint8_t>::other > & vec) { this->costs = vec; }
private:
  static const char* __s_getDataType_() { return "navfn/SetCostmapRequest"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "370ec969cdb71f9cde7c7cbe0d752308"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "370ec969cdb71f9cde7c7cbe0d752308"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "uint8[] costs\n\
uint16 height\n\
uint16 width\n\
\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, costs);
    ros::serialization::serialize(stream, height);
    ros::serialization::serialize(stream, width);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, costs);
    ros::serialization::deserialize(stream, height);
    ros::serialization::deserialize(stream, width);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(costs);
    size += ros::serialization::serializationLength(height);
    size += ros::serialization::serializationLength(width);
    return size;
  }

  typedef boost::shared_ptr< ::navfn::SetCostmapRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navfn::SetCostmapRequest_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetCostmapRequest
typedef  ::navfn::SetCostmapRequest_<std::allocator<void> > SetCostmapRequest;

typedef boost::shared_ptr< ::navfn::SetCostmapRequest> SetCostmapRequestPtr;
typedef boost::shared_ptr< ::navfn::SetCostmapRequest const> SetCostmapRequestConstPtr;


template <class ContainerAllocator>
struct SetCostmapResponse_ {
  typedef SetCostmapResponse_<ContainerAllocator> Type;

  SetCostmapResponse_()
  {
  }

  SetCostmapResponse_(const ContainerAllocator& _alloc)
  {
  }


private:
  static const char* __s_getDataType_() { return "navfn/SetCostmapResponse"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "d41d8cd98f00b204e9800998ecf8427e"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getServerMD5Sum_() { return "370ec969cdb71f9cde7c7cbe0d752308"; }
public:
  ROS_DEPRECATED static const std::string __s_getServerMD5Sum() { return __s_getServerMD5Sum_(); }

  ROS_DEPRECATED const std::string __getServerMD5Sum() const { return __s_getServerMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    return size;
  }

  typedef boost::shared_ptr< ::navfn::SetCostmapResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::navfn::SetCostmapResponse_<ContainerAllocator>  const> ConstPtr;
  boost::shared_ptr<std::map<std::string, std::string> > __connection_header;
}; // struct SetCostmapResponse
typedef  ::navfn::SetCostmapResponse_<std::allocator<void> > SetCostmapResponse;

typedef boost::shared_ptr< ::navfn::SetCostmapResponse> SetCostmapResponsePtr;
typedef boost::shared_ptr< ::navfn::SetCostmapResponse const> SetCostmapResponseConstPtr;

struct SetCostmap
{

typedef SetCostmapRequest Request;
typedef SetCostmapResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct SetCostmap
} // namespace navfn

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::navfn::SetCostmapRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::navfn::SetCostmapRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::navfn::SetCostmapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "370ec969cdb71f9cde7c7cbe0d752308";
  }

  static const char* value(const  ::navfn::SetCostmapRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x370ec969cdb71f9cULL;
  static const uint64_t static_value2 = 0xde7c7cbe0d752308ULL;
};

template<class ContainerAllocator>
struct DataType< ::navfn::SetCostmapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "navfn/SetCostmapRequest";
  }

  static const char* value(const  ::navfn::SetCostmapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::navfn::SetCostmapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "uint8[] costs\n\
uint16 height\n\
uint16 width\n\
\n\
";
  }

  static const char* value(const  ::navfn::SetCostmapRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::navfn::SetCostmapResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::navfn::SetCostmapResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::navfn::SetCostmapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "d41d8cd98f00b204e9800998ecf8427e";
  }

  static const char* value(const  ::navfn::SetCostmapResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xd41d8cd98f00b204ULL;
  static const uint64_t static_value2 = 0xe9800998ecf8427eULL;
};

template<class ContainerAllocator>
struct DataType< ::navfn::SetCostmapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "navfn/SetCostmapResponse";
  }

  static const char* value(const  ::navfn::SetCostmapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::navfn::SetCostmapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
";
  }

  static const char* value(const  ::navfn::SetCostmapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::navfn::SetCostmapResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::navfn::SetCostmapRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.costs);
    stream.next(m.height);
    stream.next(m.width);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetCostmapRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::navfn::SetCostmapResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct SetCostmapResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<navfn::SetCostmap> {
  static const char* value() 
  {
    return "370ec969cdb71f9cde7c7cbe0d752308";
  }

  static const char* value(const navfn::SetCostmap&) { return value(); } 
};

template<>
struct DataType<navfn::SetCostmap> {
  static const char* value() 
  {
    return "navfn/SetCostmap";
  }

  static const char* value(const navfn::SetCostmap&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<navfn::SetCostmapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "370ec969cdb71f9cde7c7cbe0d752308";
  }

  static const char* value(const navfn::SetCostmapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<navfn::SetCostmapRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "navfn/SetCostmap";
  }

  static const char* value(const navfn::SetCostmapRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<navfn::SetCostmapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "370ec969cdb71f9cde7c7cbe0d752308";
  }

  static const char* value(const navfn::SetCostmapResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<navfn::SetCostmapResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "navfn/SetCostmap";
  }

  static const char* value(const navfn::SetCostmapResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // NAVFN_SERVICE_SETCOSTMAP_H

